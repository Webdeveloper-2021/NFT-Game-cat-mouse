// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TokenEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenEntity", id.toString(), this);
    }
  }

  static load(id: string): TokenEntity | null {
    return changetype<TokenEntity | null>(store.get("TokenEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("claimed", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tokenEntity", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get staked(): boolean {
    let value = this.get("staked");
    return value!.toBoolean();
  }

  set staked(value: boolean) {
    this.set("staked", Value.fromBoolean(value));
  }

  get claimed(): BigDecimal {
    let value = this.get("claimed");
    return value!.toBigDecimal();
  }

  set claimed(value: BigDecimal) {
    this.set("claimed", Value.fromBigDecimal(value));
  }

  get tokenEntity(): string {
    let value = this.get("tokenEntity");
    return value!.toString();
  }

  set tokenEntity(value: string) {
    this.set("tokenEntity", Value.fromString(value));
  }
}

export class StatisEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("catMinted", Value.fromBigInt(BigInt.zero()));
    this.set("crazyCatLadyMinted", Value.fromBigInt(BigInt.zero()));
    this.set("mouseMinted", Value.fromBigInt(BigInt.zero()));
    this.set("catStolen", Value.fromBigInt(BigInt.zero()));
    this.set("crazyCatLadyStolen", Value.fromBigInt(BigInt.zero()));
    this.set("mouseStolen", Value.fromBigInt(BigInt.zero()));
    this.set("catBurned", Value.fromBigInt(BigInt.zero()));
    this.set("crazyCatLadyBurned", Value.fromBigInt(BigInt.zero()));
    this.set("mouseBurned", Value.fromBigInt(BigInt.zero()));
    this.set("catStaked", Value.fromBigInt(BigInt.zero()));
    this.set("crazyCatLadyStaked", Value.fromBigInt(BigInt.zero()));
    this.set("mouseStaked", Value.fromBigInt(BigInt.zero()));
    this.set("shackMinted", Value.fromBigInt(BigInt.zero()));
    this.set("ranchMinted", Value.fromBigInt(BigInt.zero()));
    this.set("mansionMinted", Value.fromBigInt(BigInt.zero()));
    this.set("shackStolen", Value.fromBigInt(BigInt.zero()));
    this.set("ranchStolen", Value.fromBigInt(BigInt.zero()));
    this.set("mansionStolen", Value.fromBigInt(BigInt.zero()));
    this.set("shackBurned", Value.fromBigInt(BigInt.zero()));
    this.set("ranchBurned", Value.fromBigInt(BigInt.zero()));
    this.set("mansionBurned", Value.fromBigInt(BigInt.zero()));
    this.set("shackStaked", Value.fromBigInt(BigInt.zero()));
    this.set("ranchStaked", Value.fromBigInt(BigInt.zero()));
    this.set("mansionStaked", Value.fromBigInt(BigInt.zero()));
    this.set("totalStolenByCat", Value.fromBigInt(BigInt.zero()));
    this.set("totalStolenByCrazyCat", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StatisEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StatisEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StatisEntity", id.toString(), this);
    }
  }

  static load(id: string): StatisEntity | null {
    return changetype<StatisEntity | null>(store.get("StatisEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get catMinted(): BigInt {
    let value = this.get("catMinted");
    return value!.toBigInt();
  }

  set catMinted(value: BigInt) {
    this.set("catMinted", Value.fromBigInt(value));
  }

  get crazyCatLadyMinted(): BigInt {
    let value = this.get("crazyCatLadyMinted");
    return value!.toBigInt();
  }

  set crazyCatLadyMinted(value: BigInt) {
    this.set("crazyCatLadyMinted", Value.fromBigInt(value));
  }

  get mouseMinted(): BigInt {
    let value = this.get("mouseMinted");
    return value!.toBigInt();
  }

  set mouseMinted(value: BigInt) {
    this.set("mouseMinted", Value.fromBigInt(value));
  }

  get catStolen(): BigInt {
    let value = this.get("catStolen");
    return value!.toBigInt();
  }

  set catStolen(value: BigInt) {
    this.set("catStolen", Value.fromBigInt(value));
  }

  get crazyCatLadyStolen(): BigInt {
    let value = this.get("crazyCatLadyStolen");
    return value!.toBigInt();
  }

  set crazyCatLadyStolen(value: BigInt) {
    this.set("crazyCatLadyStolen", Value.fromBigInt(value));
  }

  get mouseStolen(): BigInt {
    let value = this.get("mouseStolen");
    return value!.toBigInt();
  }

  set mouseStolen(value: BigInt) {
    this.set("mouseStolen", Value.fromBigInt(value));
  }

  get catBurned(): BigInt {
    let value = this.get("catBurned");
    return value!.toBigInt();
  }

  set catBurned(value: BigInt) {
    this.set("catBurned", Value.fromBigInt(value));
  }

  get crazyCatLadyBurned(): BigInt {
    let value = this.get("crazyCatLadyBurned");
    return value!.toBigInt();
  }

  set crazyCatLadyBurned(value: BigInt) {
    this.set("crazyCatLadyBurned", Value.fromBigInt(value));
  }

  get mouseBurned(): BigInt {
    let value = this.get("mouseBurned");
    return value!.toBigInt();
  }

  set mouseBurned(value: BigInt) {
    this.set("mouseBurned", Value.fromBigInt(value));
  }

  get catStaked(): BigInt {
    let value = this.get("catStaked");
    return value!.toBigInt();
  }

  set catStaked(value: BigInt) {
    this.set("catStaked", Value.fromBigInt(value));
  }

  get crazyCatLadyStaked(): BigInt {
    let value = this.get("crazyCatLadyStaked");
    return value!.toBigInt();
  }

  set crazyCatLadyStaked(value: BigInt) {
    this.set("crazyCatLadyStaked", Value.fromBigInt(value));
  }

  get mouseStaked(): BigInt {
    let value = this.get("mouseStaked");
    return value!.toBigInt();
  }

  set mouseStaked(value: BigInt) {
    this.set("mouseStaked", Value.fromBigInt(value));
  }

  get shackMinted(): BigInt {
    let value = this.get("shackMinted");
    return value!.toBigInt();
  }

  set shackMinted(value: BigInt) {
    this.set("shackMinted", Value.fromBigInt(value));
  }

  get ranchMinted(): BigInt {
    let value = this.get("ranchMinted");
    return value!.toBigInt();
  }

  set ranchMinted(value: BigInt) {
    this.set("ranchMinted", Value.fromBigInt(value));
  }

  get mansionMinted(): BigInt {
    let value = this.get("mansionMinted");
    return value!.toBigInt();
  }

  set mansionMinted(value: BigInt) {
    this.set("mansionMinted", Value.fromBigInt(value));
  }

  get shackStolen(): BigInt {
    let value = this.get("shackStolen");
    return value!.toBigInt();
  }

  set shackStolen(value: BigInt) {
    this.set("shackStolen", Value.fromBigInt(value));
  }

  get ranchStolen(): BigInt {
    let value = this.get("ranchStolen");
    return value!.toBigInt();
  }

  set ranchStolen(value: BigInt) {
    this.set("ranchStolen", Value.fromBigInt(value));
  }

  get mansionStolen(): BigInt {
    let value = this.get("mansionStolen");
    return value!.toBigInt();
  }

  set mansionStolen(value: BigInt) {
    this.set("mansionStolen", Value.fromBigInt(value));
  }

  get shackBurned(): BigInt {
    let value = this.get("shackBurned");
    return value!.toBigInt();
  }

  set shackBurned(value: BigInt) {
    this.set("shackBurned", Value.fromBigInt(value));
  }

  get ranchBurned(): BigInt {
    let value = this.get("ranchBurned");
    return value!.toBigInt();
  }

  set ranchBurned(value: BigInt) {
    this.set("ranchBurned", Value.fromBigInt(value));
  }

  get mansionBurned(): BigInt {
    let value = this.get("mansionBurned");
    return value!.toBigInt();
  }

  set mansionBurned(value: BigInt) {
    this.set("mansionBurned", Value.fromBigInt(value));
  }

  get shackStaked(): BigInt {
    let value = this.get("shackStaked");
    return value!.toBigInt();
  }

  set shackStaked(value: BigInt) {
    this.set("shackStaked", Value.fromBigInt(value));
  }

  get ranchStaked(): BigInt {
    let value = this.get("ranchStaked");
    return value!.toBigInt();
  }

  set ranchStaked(value: BigInt) {
    this.set("ranchStaked", Value.fromBigInt(value));
  }

  get mansionStaked(): BigInt {
    let value = this.get("mansionStaked");
    return value!.toBigInt();
  }

  set mansionStaked(value: BigInt) {
    this.set("mansionStaked", Value.fromBigInt(value));
  }

  get totalStolenByCat(): BigInt {
    let value = this.get("totalStolenByCat");
    return value!.toBigInt();
  }

  set totalStolenByCat(value: BigInt) {
    this.set("totalStolenByCat", Value.fromBigInt(value));
  }

  get totalStolenByCrazyCat(): BigInt {
    let value = this.get("totalStolenByCrazyCat");
    return value!.toBigInt();
  }

  set totalStolenByCrazyCat(value: BigInt) {
    this.set("totalStolenByCrazyCat", Value.fromBigInt(value));
  }
}

export class LogEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("event", Value.fromString(""));
    this.set("time", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LogEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LogEntity", id.toString(), this);
    }
  }

  static load(id: string): LogEntity | null {
    return changetype<LogEntity | null>(store.get("LogEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get time(): string {
    let value = this.get("time");
    return value!.toString();
  }

  set time(value: string) {
    this.set("time", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }
}
