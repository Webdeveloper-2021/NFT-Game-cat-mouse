// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class MansionBurned extends ethereum.Event {
  get params(): MansionBurned__Params {
    return new MansionBurned__Params(this);
  }
}

export class MansionBurned__Params {
  _event: MansionBurned;

  constructor(event: MansionBurned) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MansionMinted extends ethereum.Event {
  get params(): MansionMinted__Params {
    return new MansionMinted__Params(this);
  }
}

export class MansionMinted__Params {
  _event: MansionMinted;

  constructor(event: MansionMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MansionStaked extends ethereum.Event {
  get params(): MansionStaked__Params {
    return new MansionStaked__Params(this);
  }
}

export class MansionStaked__Params {
  _event: MansionStaked;

  constructor(event: MansionStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MansionStolen extends ethereum.Event {
  get params(): MansionStolen__Params {
    return new MansionStolen__Params(this);
  }
}

export class MansionStolen__Params {
  _event: MansionStolen;

  constructor(event: MansionStolen) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MansionUnStaked extends ethereum.Event {
  get params(): MansionUnStaked__Params {
    return new MansionUnStaked__Params(this);
  }
}

export class MansionUnStaked__Params {
  _event: MansionUnStaked;

  constructor(event: MansionUnStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RanchBurned extends ethereum.Event {
  get params(): RanchBurned__Params {
    return new RanchBurned__Params(this);
  }
}

export class RanchBurned__Params {
  _event: RanchBurned;

  constructor(event: RanchBurned) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RanchMinted extends ethereum.Event {
  get params(): RanchMinted__Params {
    return new RanchMinted__Params(this);
  }
}

export class RanchMinted__Params {
  _event: RanchMinted;

  constructor(event: RanchMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RanchStaked extends ethereum.Event {
  get params(): RanchStaked__Params {
    return new RanchStaked__Params(this);
  }
}

export class RanchStaked__Params {
  _event: RanchStaked;

  constructor(event: RanchStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RanchStolen extends ethereum.Event {
  get params(): RanchStolen__Params {
    return new RanchStolen__Params(this);
  }
}

export class RanchStolen__Params {
  _event: RanchStolen;

  constructor(event: RanchStolen) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RanchUnStaked extends ethereum.Event {
  get params(): RanchUnStaked__Params {
    return new RanchUnStaked__Params(this);
  }
}

export class RanchUnStaked__Params {
  _event: RanchUnStaked;

  constructor(event: RanchUnStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ShackBurned extends ethereum.Event {
  get params(): ShackBurned__Params {
    return new ShackBurned__Params(this);
  }
}

export class ShackBurned__Params {
  _event: ShackBurned;

  constructor(event: ShackBurned) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ShackMinted extends ethereum.Event {
  get params(): ShackMinted__Params {
    return new ShackMinted__Params(this);
  }
}

export class ShackMinted__Params {
  _event: ShackMinted;

  constructor(event: ShackMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ShackStaked extends ethereum.Event {
  get params(): ShackStaked__Params {
    return new ShackStaked__Params(this);
  }
}

export class ShackStaked__Params {
  _event: ShackStaked;

  constructor(event: ShackStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ShackStolen extends ethereum.Event {
  get params(): ShackStolen__Params {
    return new ShackStolen__Params(this);
  }
}

export class ShackStolen__Params {
  _event: ShackStolen;

  constructor(event: ShackStolen) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ShackUnStaked extends ethereum.Event {
  get params(): ShackUnStaked__Params {
    return new ShackUnStaked__Params(this);
  }
}

export class ShackUnStaked__Params {
  _event: ShackUnStaked;

  constructor(event: ShackUnStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TestTokenMinted extends ethereum.Event {
  get params(): TestTokenMinted__Params {
    return new TestTokenMinted__Params(this);
  }
}

export class TestTokenMinted__Params {
  _event: TestTokenMinted;

  constructor(event: TestTokenMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenMinted extends ethereum.Event {
  get params(): TokenMinted__Params {
    return new TokenMinted__Params(this);
  }
}

export class TokenMinted__Params {
  _event: TokenMinted;

  constructor(event: TokenMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class House__generateResultTStruct extends ethereum.Tuple {
  get roll(): i32 {
    return this[0].toI32();
  }

  get body(): i32 {
    return this[1].toI32();
  }
}

export class House__getTokenTraitsResultValue0Struct extends ethereum.Tuple {
  get roll(): i32 {
    return this[0].toI32();
  }

  get body(): i32 {
    return this[1].toI32();
  }
}

export class House extends ethereum.SmartContract {
  static bind(address: Address): House {
    return new House("House", address);
  }

  aliases(param0: BigInt, param1: BigInt): i32 {
    let result = super.call("aliases", "aliases(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toI32();
  }

  try_aliases(param0: BigInt, param1: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("aliases", "aliases(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  existingCombinations(param0: BigInt): BigInt {
    let result = super.call(
      "existingCombinations",
      "existingCombinations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_existingCombinations(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "existingCombinations",
      "existingCombinations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  generate(
    recipient: Address,
    tokenId: BigInt,
    seed: BigInt
  ): House__generateResultTStruct {
    let result = super.call(
      "generate",
      "generate(address,uint256,uint256):((uint8,uint8))",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(seed)
      ]
    );

    return changetype<House__generateResultTStruct>(result[0].toTuple());
  }

  try_generate(
    recipient: Address,
    tokenId: BigInt,
    seed: BigInt
  ): ethereum.CallResult<House__generateResultTStruct> {
    let result = super.tryCall(
      "generate",
      "generate(address,uint256,uint256):((uint8,uint8))",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(seed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<House__generateResultTStruct>(value[0].toTuple())
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxTokens(): BigInt {
    let result = super.call("getMaxTokens", "getMaxTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMaxTokens", "getMaxTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenTraits(tokenId: BigInt): House__getTokenTraitsResultValue0Struct {
    let result = super.call(
      "getTokenTraits",
      "getTokenTraits(uint256):((uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<House__getTokenTraitsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTokenTraits(
    tokenId: BigInt
  ): ethereum.CallResult<House__getTokenTraitsResultValue0Struct> {
    let result = super.tryCall(
      "getTokenTraits",
      "getTokenTraits(uint256):((uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<House__getTokenTraitsResultValue0Struct>(value[0].toTuple())
    );
  }

  getTokenWriteBlock(tokenId: BigInt): BigInt {
    let result = super.call(
      "getTokenWriteBlock",
      "getTokenWriteBlock(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getTokenWriteBlock(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenWriteBlock",
      "getTokenWriteBlock(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  habitat(): Address {
    let result = super.call("habitat", "habitat():(address)", []);

    return result[0].toAddress();
  }

  try_habitat(): ethereum.CallResult<Address> {
    let result = super.tryCall("habitat", "habitat():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  houseTraits(): Address {
    let result = super.call("houseTraits", "houseTraits():(address)", []);

    return result[0].toAddress();
  }

  try_houseTraits(): ethereum.CallResult<Address> {
    let result = super.tryCall("houseTraits", "houseTraits():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMansion(tokenId: BigInt): boolean {
    let result = super.call("isMansion", "isMansion(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isMansion(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMansion", "isMansion(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRanch(tokenId: BigInt): boolean {
    let result = super.call("isRanch", "isRanch(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isRanch(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRanch", "isRanch(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isShack(tokenId: BigInt): boolean {
    let result = super.call("isShack", "isShack(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isShack(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isShack", "isShack(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTokens(): BigInt {
    let result = super.call("maxTokens", "maxTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxTokens", "maxTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minted(): i32 {
    let result = super.call("minted", "minted():(uint16)", []);

    return result[0].toI32();
  }

  try_minted(): ethereum.CallResult<i32> {
    let result = super.tryCall("minted", "minted():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  randomizer(): Address {
    let result = super.call("randomizer", "randomizer():(address)", []);

    return result[0].toAddress();
  }

  try_randomizer(): ethereum.CallResult<Address> {
    let result = super.tryCall("randomizer", "randomizer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rarities(param0: BigInt, param1: BigInt): i32 {
    let result = super.call("rarities", "rarities(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toI32();
  }

  try_rarities(param0: BigInt, param1: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "rarities",
      "rarities(uint256,uint256):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _maxTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class EmitMansionStakedEventCall extends ethereum.Call {
  get inputs(): EmitMansionStakedEventCall__Inputs {
    return new EmitMansionStakedEventCall__Inputs(this);
  }

  get outputs(): EmitMansionStakedEventCall__Outputs {
    return new EmitMansionStakedEventCall__Outputs(this);
  }
}

export class EmitMansionStakedEventCall__Inputs {
  _call: EmitMansionStakedEventCall;

  constructor(call: EmitMansionStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitMansionStakedEventCall__Outputs {
  _call: EmitMansionStakedEventCall;

  constructor(call: EmitMansionStakedEventCall) {
    this._call = call;
  }
}

export class EmitMansionUnStakedEventCall extends ethereum.Call {
  get inputs(): EmitMansionUnStakedEventCall__Inputs {
    return new EmitMansionUnStakedEventCall__Inputs(this);
  }

  get outputs(): EmitMansionUnStakedEventCall__Outputs {
    return new EmitMansionUnStakedEventCall__Outputs(this);
  }
}

export class EmitMansionUnStakedEventCall__Inputs {
  _call: EmitMansionUnStakedEventCall;

  constructor(call: EmitMansionUnStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitMansionUnStakedEventCall__Outputs {
  _call: EmitMansionUnStakedEventCall;

  constructor(call: EmitMansionUnStakedEventCall) {
    this._call = call;
  }
}

export class EmitRanchStakedEventCall extends ethereum.Call {
  get inputs(): EmitRanchStakedEventCall__Inputs {
    return new EmitRanchStakedEventCall__Inputs(this);
  }

  get outputs(): EmitRanchStakedEventCall__Outputs {
    return new EmitRanchStakedEventCall__Outputs(this);
  }
}

export class EmitRanchStakedEventCall__Inputs {
  _call: EmitRanchStakedEventCall;

  constructor(call: EmitRanchStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitRanchStakedEventCall__Outputs {
  _call: EmitRanchStakedEventCall;

  constructor(call: EmitRanchStakedEventCall) {
    this._call = call;
  }
}

export class EmitRanchUnStakedEventCall extends ethereum.Call {
  get inputs(): EmitRanchUnStakedEventCall__Inputs {
    return new EmitRanchUnStakedEventCall__Inputs(this);
  }

  get outputs(): EmitRanchUnStakedEventCall__Outputs {
    return new EmitRanchUnStakedEventCall__Outputs(this);
  }
}

export class EmitRanchUnStakedEventCall__Inputs {
  _call: EmitRanchUnStakedEventCall;

  constructor(call: EmitRanchUnStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitRanchUnStakedEventCall__Outputs {
  _call: EmitRanchUnStakedEventCall;

  constructor(call: EmitRanchUnStakedEventCall) {
    this._call = call;
  }
}

export class EmitShackStakedEventCall extends ethereum.Call {
  get inputs(): EmitShackStakedEventCall__Inputs {
    return new EmitShackStakedEventCall__Inputs(this);
  }

  get outputs(): EmitShackStakedEventCall__Outputs {
    return new EmitShackStakedEventCall__Outputs(this);
  }
}

export class EmitShackStakedEventCall__Inputs {
  _call: EmitShackStakedEventCall;

  constructor(call: EmitShackStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitShackStakedEventCall__Outputs {
  _call: EmitShackStakedEventCall;

  constructor(call: EmitShackStakedEventCall) {
    this._call = call;
  }
}

export class EmitShackUnStakedEventCall extends ethereum.Call {
  get inputs(): EmitShackUnStakedEventCall__Inputs {
    return new EmitShackUnStakedEventCall__Inputs(this);
  }

  get outputs(): EmitShackUnStakedEventCall__Outputs {
    return new EmitShackUnStakedEventCall__Outputs(this);
  }
}

export class EmitShackUnStakedEventCall__Inputs {
  _call: EmitShackUnStakedEventCall;

  constructor(call: EmitShackUnStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitShackUnStakedEventCall__Outputs {
  _call: EmitShackUnStakedEventCall;

  constructor(call: EmitShackUnStakedEventCall) {
    this._call = call;
  }
}

export class GenerateCall extends ethereum.Call {
  get inputs(): GenerateCall__Inputs {
    return new GenerateCall__Inputs(this);
  }

  get outputs(): GenerateCall__Outputs {
    return new GenerateCall__Outputs(this);
  }
}

export class GenerateCall__Inputs {
  _call: GenerateCall;

  constructor(call: GenerateCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get seed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GenerateCall__Outputs {
  _call: GenerateCall;

  constructor(call: GenerateCall) {
    this._call = call;
  }

  get t(): GenerateCallTStruct {
    return changetype<GenerateCallTStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class GenerateCallTStruct extends ethereum.Tuple {
  get roll(): i32 {
    return this[0].toI32();
  }

  get body(): i32 {
    return this[1].toI32();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractsCall extends ethereum.Call {
  get inputs(): SetContractsCall__Inputs {
    return new SetContractsCall__Inputs(this);
  }

  get outputs(): SetContractsCall__Outputs {
    return new SetContractsCall__Outputs(this);
  }
}

export class SetContractsCall__Inputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }

  get _houseTraits(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _habitat(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rand(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetContractsCall__Outputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateOriginAccessCall extends ethereum.Call {
  get inputs(): UpdateOriginAccessCall__Inputs {
    return new UpdateOriginAccessCall__Inputs(this);
  }

  get outputs(): UpdateOriginAccessCall__Outputs {
    return new UpdateOriginAccessCall__Outputs(this);
  }
}

export class UpdateOriginAccessCall__Inputs {
  _call: UpdateOriginAccessCall;

  constructor(call: UpdateOriginAccessCall) {
    this._call = call;
  }

  get tokenIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }
}

export class UpdateOriginAccessCall__Outputs {
  _call: UpdateOriginAccessCall;

  constructor(call: UpdateOriginAccessCall) {
    this._call = call;
  }
}
