// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CatBurned extends ethereum.Event {
  get params(): CatBurned__Params {
    return new CatBurned__Params(this);
  }
}

export class CatBurned__Params {
  _event: CatBurned;

  constructor(event: CatBurned) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CatMinted extends ethereum.Event {
  get params(): CatMinted__Params {
    return new CatMinted__Params(this);
  }
}

export class CatMinted__Params {
  _event: CatMinted;

  constructor(event: CatMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CatStaked extends ethereum.Event {
  get params(): CatStaked__Params {
    return new CatStaked__Params(this);
  }
}

export class CatStaked__Params {
  _event: CatStaked;

  constructor(event: CatStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CatStolen extends ethereum.Event {
  get params(): CatStolen__Params {
    return new CatStolen__Params(this);
  }
}

export class CatStolen__Params {
  _event: CatStolen;

  constructor(event: CatStolen) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CatUnStaked extends ethereum.Event {
  get params(): CatUnStaked__Params {
    return new CatUnStaked__Params(this);
  }
}

export class CatUnStaked__Params {
  _event: CatUnStaked;

  constructor(event: CatUnStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CrazyCatLadyBurned extends ethereum.Event {
  get params(): CrazyCatLadyBurned__Params {
    return new CrazyCatLadyBurned__Params(this);
  }
}

export class CrazyCatLadyBurned__Params {
  _event: CrazyCatLadyBurned;

  constructor(event: CrazyCatLadyBurned) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CrazyCatLadyMinted extends ethereum.Event {
  get params(): CrazyCatLadyMinted__Params {
    return new CrazyCatLadyMinted__Params(this);
  }
}

export class CrazyCatLadyMinted__Params {
  _event: CrazyCatLadyMinted;

  constructor(event: CrazyCatLadyMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CrazyCatLadyStaked extends ethereum.Event {
  get params(): CrazyCatLadyStaked__Params {
    return new CrazyCatLadyStaked__Params(this);
  }
}

export class CrazyCatLadyStaked__Params {
  _event: CrazyCatLadyStaked;

  constructor(event: CrazyCatLadyStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CrazyCatLadyStolen extends ethereum.Event {
  get params(): CrazyCatLadyStolen__Params {
    return new CrazyCatLadyStolen__Params(this);
  }
}

export class CrazyCatLadyStolen__Params {
  _event: CrazyCatLadyStolen;

  constructor(event: CrazyCatLadyStolen) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CrazyCatLadyUnStaked extends ethereum.Event {
  get params(): CrazyCatLadyUnStaked__Params {
    return new CrazyCatLadyUnStaked__Params(this);
  }
}

export class CrazyCatLadyUnStaked__Params {
  _event: CrazyCatLadyUnStaked;

  constructor(event: CrazyCatLadyUnStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MouseBurned extends ethereum.Event {
  get params(): MouseBurned__Params {
    return new MouseBurned__Params(this);
  }
}

export class MouseBurned__Params {
  _event: MouseBurned;

  constructor(event: MouseBurned) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MouseMinted extends ethereum.Event {
  get params(): MouseMinted__Params {
    return new MouseMinted__Params(this);
  }
}

export class MouseMinted__Params {
  _event: MouseMinted;

  constructor(event: MouseMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MouseStaked extends ethereum.Event {
  get params(): MouseStaked__Params {
    return new MouseStaked__Params(this);
  }
}

export class MouseStaked__Params {
  _event: MouseStaked;

  constructor(event: MouseStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MouseStolen extends ethereum.Event {
  get params(): MouseStolen__Params {
    return new MouseStolen__Params(this);
  }
}

export class MouseStolen__Params {
  _event: MouseStolen;

  constructor(event: MouseStolen) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MouseUnStaked extends ethereum.Event {
  get params(): MouseUnStaked__Params {
    return new MouseUnStaked__Params(this);
  }
}

export class MouseUnStaked__Params {
  _event: MouseUnStaked;

  constructor(event: MouseUnStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RollChanged extends ethereum.Event {
  get params(): RollChanged__Params {
    return new RollChanged__Params(this);
  }
}

export class RollChanged__Params {
  _event: RollChanged;

  constructor(event: RollChanged) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get roll(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class TestTokenMinted extends ethereum.Event {
  get params(): TestTokenMinted__Params {
    return new TestTokenMinted__Params(this);
  }
}

export class TestTokenMinted__Params {
  _event: TestTokenMinted;

  constructor(event: TestTokenMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenMinted extends ethereum.Event {
  get params(): TokenMinted__Params {
    return new TokenMinted__Params(this);
  }
}

export class TokenMinted__Params {
  _event: TokenMinted;

  constructor(event: TokenMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CnM__getTokenTraitsResultValue0Struct extends ethereum.Tuple {
  get isCat(): boolean {
    return this[0].toBoolean();
  }

  get isCrazy(): boolean {
    return this[1].toBoolean();
  }

  get roll(): i32 {
    return this[2].toI32();
  }

  get body(): i32 {
    return this[3].toI32();
  }

  get color(): i32 {
    return this[4].toI32();
  }

  get eyes(): i32 {
    return this[5].toI32();
  }

  get eyebrows(): i32 {
    return this[6].toI32();
  }

  get neck(): i32 {
    return this[7].toI32();
  }

  get glasses(): i32 {
    return this[8].toI32();
  }

  get hair(): i32 {
    return this[9].toI32();
  }

  get head(): i32 {
    return this[10].toI32();
  }

  get markings(): i32 {
    return this[11].toI32();
  }

  get mouth(): i32 {
    return this[12].toI32();
  }

  get nose(): i32 {
    return this[13].toI32();
  }

  get props(): i32 {
    return this[14].toI32();
  }

  get shirts(): i32 {
    return this[15].toI32();
  }
}

export class CnM extends ethereum.SmartContract {
  static bind(address: Address): CnM {
    return new CnM("CnM", address);
  }

  PAID_TOKENS(): BigInt {
    let result = super.call("PAID_TOKENS", "PAID_TOKENS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PAID_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PAID_TOKENS", "PAID_TOKENS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aliases(param0: BigInt, param1: BigInt): i32 {
    let result = super.call("aliases", "aliases(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toI32();
  }

  try_aliases(param0: BigInt, param1: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("aliases", "aliases(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  existingCombinations(param0: BigInt): BigInt {
    let result = super.call(
      "existingCombinations",
      "existingCombinations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_existingCombinations(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "existingCombinations",
      "existingCombinations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxTokens(): BigInt {
    let result = super.call("getMaxTokens", "getMaxTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMaxTokens", "getMaxTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPaidTokens(): BigInt {
    let result = super.call("getPaidTokens", "getPaidTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPaidTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPaidTokens",
      "getPaidTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenRoll(tokenId: BigInt): i32 {
    let result = super.call("getTokenRoll", "getTokenRoll(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toI32();
  }

  try_getTokenRoll(tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getTokenRoll",
      "getTokenRoll(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTokenTraits(tokenId: BigInt): CnM__getTokenTraitsResultValue0Struct {
    let result = super.call(
      "getTokenTraits",
      "getTokenTraits(uint256):((bool,bool,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<CnM__getTokenTraitsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTokenTraits(
    tokenId: BigInt
  ): ethereum.CallResult<CnM__getTokenTraitsResultValue0Struct> {
    let result = super.tryCall(
      "getTokenTraits",
      "getTokenTraits(uint256):((bool,bool,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CnM__getTokenTraitsResultValue0Struct>(value[0].toTuple())
    );
  }

  getTokenWriteBlock(tokenId: BigInt): BigInt {
    let result = super.call(
      "getTokenWriteBlock",
      "getTokenWriteBlock(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getTokenWriteBlock(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenWriteBlock",
      "getTokenWriteBlock(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  habitat(): Address {
    let result = super.call("habitat", "habitat():(address)", []);

    return result[0].toAddress();
  }

  try_habitat(): ethereum.CallResult<Address> {
    let result = super.tryCall("habitat", "habitat():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCat(tokenId: BigInt): boolean {
    let result = super.call("isCat", "isCat(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isCat(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCat", "isCat(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClaimable(): boolean {
    let result = super.call("isClaimable", "isClaimable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isClaimable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClaimable", "isClaimable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCrazyCatLady(tokenId: BigInt): boolean {
    let result = super.call(
      "isCrazyCatLady",
      "isCrazyCatLady(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBoolean();
  }

  try_isCrazyCatLady(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCrazyCatLady",
      "isCrazyCatLady(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTokens(): BigInt {
    let result = super.call("maxTokens", "maxTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxTokens", "maxTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minted(): i32 {
    let result = super.call("minted", "minted():(uint16)", []);

    return result[0].toI32();
  }

  try_minted(): ethereum.CallResult<i32> {
    let result = super.tryCall("minted", "minted():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  randomizer(): Address {
    let result = super.call("randomizer", "randomizer():(address)", []);

    return result[0].toAddress();
  }

  try_randomizer(): ethereum.CallResult<Address> {
    let result = super.tryCall("randomizer", "randomizer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rarities(param0: BigInt, param1: BigInt): i32 {
    let result = super.call("rarities", "rarities(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toI32();
  }

  try_rarities(param0: BigInt, param1: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "rarities",
      "rarities(uint256,uint256):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  traits(): Address {
    let result = super.call("traits", "traits():(address)", []);

    return result[0].toAddress();
  }

  try_traits(): ethereum.CallResult<Address> {
    let result = super.tryCall("traits", "traits():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _maxTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class EmitCatStakedEventCall extends ethereum.Call {
  get inputs(): EmitCatStakedEventCall__Inputs {
    return new EmitCatStakedEventCall__Inputs(this);
  }

  get outputs(): EmitCatStakedEventCall__Outputs {
    return new EmitCatStakedEventCall__Outputs(this);
  }
}

export class EmitCatStakedEventCall__Inputs {
  _call: EmitCatStakedEventCall;

  constructor(call: EmitCatStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitCatStakedEventCall__Outputs {
  _call: EmitCatStakedEventCall;

  constructor(call: EmitCatStakedEventCall) {
    this._call = call;
  }
}

export class EmitCatUnStakedEventCall extends ethereum.Call {
  get inputs(): EmitCatUnStakedEventCall__Inputs {
    return new EmitCatUnStakedEventCall__Inputs(this);
  }

  get outputs(): EmitCatUnStakedEventCall__Outputs {
    return new EmitCatUnStakedEventCall__Outputs(this);
  }
}

export class EmitCatUnStakedEventCall__Inputs {
  _call: EmitCatUnStakedEventCall;

  constructor(call: EmitCatUnStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitCatUnStakedEventCall__Outputs {
  _call: EmitCatUnStakedEventCall;

  constructor(call: EmitCatUnStakedEventCall) {
    this._call = call;
  }
}

export class EmitCrazyCatStakedEventCall extends ethereum.Call {
  get inputs(): EmitCrazyCatStakedEventCall__Inputs {
    return new EmitCrazyCatStakedEventCall__Inputs(this);
  }

  get outputs(): EmitCrazyCatStakedEventCall__Outputs {
    return new EmitCrazyCatStakedEventCall__Outputs(this);
  }
}

export class EmitCrazyCatStakedEventCall__Inputs {
  _call: EmitCrazyCatStakedEventCall;

  constructor(call: EmitCrazyCatStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitCrazyCatStakedEventCall__Outputs {
  _call: EmitCrazyCatStakedEventCall;

  constructor(call: EmitCrazyCatStakedEventCall) {
    this._call = call;
  }
}

export class EmitCrazyCatUnStakedEventCall extends ethereum.Call {
  get inputs(): EmitCrazyCatUnStakedEventCall__Inputs {
    return new EmitCrazyCatUnStakedEventCall__Inputs(this);
  }

  get outputs(): EmitCrazyCatUnStakedEventCall__Outputs {
    return new EmitCrazyCatUnStakedEventCall__Outputs(this);
  }
}

export class EmitCrazyCatUnStakedEventCall__Inputs {
  _call: EmitCrazyCatUnStakedEventCall;

  constructor(call: EmitCrazyCatUnStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitCrazyCatUnStakedEventCall__Outputs {
  _call: EmitCrazyCatUnStakedEventCall;

  constructor(call: EmitCrazyCatUnStakedEventCall) {
    this._call = call;
  }
}

export class EmitMouseStakedEventCall extends ethereum.Call {
  get inputs(): EmitMouseStakedEventCall__Inputs {
    return new EmitMouseStakedEventCall__Inputs(this);
  }

  get outputs(): EmitMouseStakedEventCall__Outputs {
    return new EmitMouseStakedEventCall__Outputs(this);
  }
}

export class EmitMouseStakedEventCall__Inputs {
  _call: EmitMouseStakedEventCall;

  constructor(call: EmitMouseStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitMouseStakedEventCall__Outputs {
  _call: EmitMouseStakedEventCall;

  constructor(call: EmitMouseStakedEventCall) {
    this._call = call;
  }
}

export class EmitMouseUnStakedEventCall extends ethereum.Call {
  get inputs(): EmitMouseUnStakedEventCall__Inputs {
    return new EmitMouseUnStakedEventCall__Inputs(this);
  }

  get outputs(): EmitMouseUnStakedEventCall__Outputs {
    return new EmitMouseUnStakedEventCall__Outputs(this);
  }
}

export class EmitMouseUnStakedEventCall__Inputs {
  _call: EmitMouseUnStakedEventCall;

  constructor(call: EmitMouseUnStakedEventCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitMouseUnStakedEventCall__Outputs {
  _call: EmitMouseUnStakedEventCall;

  constructor(call: EmitMouseUnStakedEventCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractsCall extends ethereum.Call {
  get inputs(): SetContractsCall__Inputs {
    return new SetContractsCall__Inputs(this);
  }

  get outputs(): SetContractsCall__Outputs {
    return new SetContractsCall__Outputs(this);
  }
}

export class SetContractsCall__Inputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }

  get _traits(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _habitat(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rand(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetContractsCall__Outputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }
}

export class SetPaidTokensCall extends ethereum.Call {
  get inputs(): SetPaidTokensCall__Inputs {
    return new SetPaidTokensCall__Inputs(this);
  }

  get outputs(): SetPaidTokensCall__Outputs {
    return new SetPaidTokensCall__Outputs(this);
  }
}

export class SetPaidTokensCall__Inputs {
  _call: SetPaidTokensCall;

  constructor(call: SetPaidTokensCall) {
    this._call = call;
  }

  get _paidTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPaidTokensCall__Outputs {
  _call: SetPaidTokensCall;

  constructor(call: SetPaidTokensCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetRollCall extends ethereum.Call {
  get inputs(): SetRollCall__Inputs {
    return new SetRollCall__Inputs(this);
  }

  get outputs(): SetRollCall__Outputs {
    return new SetRollCall__Outputs(this);
  }
}

export class SetRollCall__Inputs {
  _call: SetRollCall;

  constructor(call: SetRollCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get habitatType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetRollCall__Outputs {
  _call: SetRollCall;

  constructor(call: SetRollCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateOriginAccessCall extends ethereum.Call {
  get inputs(): UpdateOriginAccessCall__Inputs {
    return new UpdateOriginAccessCall__Inputs(this);
  }

  get outputs(): UpdateOriginAccessCall__Outputs {
    return new UpdateOriginAccessCall__Outputs(this);
  }
}

export class UpdateOriginAccessCall__Inputs {
  _call: UpdateOriginAccessCall;

  constructor(call: UpdateOriginAccessCall) {
    this._call = call;
  }

  get tokenIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }
}

export class UpdateOriginAccessCall__Outputs {
  _call: UpdateOriginAccessCall;

  constructor(call: UpdateOriginAccessCall) {
    this._call = call;
  }
}

export class UpdatePaidTokenCall extends ethereum.Call {
  get inputs(): UpdatePaidTokenCall__Inputs {
    return new UpdatePaidTokenCall__Inputs(this);
  }

  get outputs(): UpdatePaidTokenCall__Outputs {
    return new UpdatePaidTokenCall__Outputs(this);
  }
}

export class UpdatePaidTokenCall__Inputs {
  _call: UpdatePaidTokenCall;

  constructor(call: UpdatePaidTokenCall) {
    this._call = call;
  }

  get limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePaidTokenCall__Outputs {
  _call: UpdatePaidTokenCall;

  constructor(call: UpdatePaidTokenCall) {
    this._call = call;
  }
}
